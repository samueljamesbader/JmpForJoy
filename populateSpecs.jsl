//  Load the limits into the column properties
//adapted from  ian.cox.com: 02Jun2005


// ******************************************************************************************
// Given a column reference, returns the spec limits in a vector, [lower, upper, target]:
// If a limit is not defined it is returned as .
// ******************************************************************************************
getSpecs = Function( {col},
	{Default Local},
		// Note that the number of arguments in slp below can change! It can be 0 (if the
	// property is not even defined) or 1, 2 or 3
	slp = col << GetProperty( "Spec Limits" );
		// Assume that nothing is defined . . .
	l = .;
	u = .;
	t = .;
		// Find out what is defined . . .
	For( i = 1, i <= N Arg( slp ), i++,
		thisExpr = Arg( slp, i );
		sType = Char( Head( thisExpr ) );
		If(
			sType == "LSL", l = Arg( thisExpr, 1 ),
			sType == "USL", u = Arg( thisExpr, 1 ),
			sType == "Target", t = Arg( thisExpr, 1 )
		);
	);
	Matrix( {l, u, t} );
);

// ******************************************************************************************
// Given a table, make a new table containing the spec limits from the column properties
// ******************************************************************************************
extractSpecs = Function( {dt},
	{Default Local},
	// Make the new table
	cols = dt << GetColumnNames( "String" );
	dt2 = New Table( "Spec Limits from " || (dt << GetName),
		AddRows( N Items( cols ) ),
		New Column( "Variable", Character ),
		New Column( "LSL", Numeric ),
		New Column( "USL", Numeric ),
		New Column( "Target", Numeric )
	);
	// Fill in the table
	For( c = 1, c <= N Items( cols ), c++,
		cName = cols[c];
		specs = getSpecs( Column( dt, cName ) );
		Column( dt2, "Variable" )[c] = cName;
		Column( dt2, "LSL" )[c] = specs[1];
		Column( dt2, "USL" )[c] = specs[2];
		Column( dt2, "Target" )[c] = specs[3];
	);
	// Return a reference to the limits table we made
	dt2;
);

// ******************************************************************************************
// Given a column reference, sets spec liomits property
// ******************************************************************************************
SetSpecLimits = Function( {c, lsl, usl, tar},
	cmd = Expr( c << SetProperty( "Spec Limits", {LSL( Expr( lsl ) ), USL( Expr( usl ) ), Target( Expr( tar ) )} ) );
	Eval( Eval Expr( cmd ) );
);

// ******************************************************************************************
// Given a table dt, and a table dt1 containing spec limits, populates spec limit properties in dt
//
// Sam Edit: Also does axis limits!
// ******************************************************************************************
populateSpecs = Function( {dt, dt1},
	{Default Local},
	// Loop over rows of dt1, and iff there is a matching column in dt set its property
	clist = dt << GetColumnNames( Numeric, String );
	For( r = 1, r <= N Rows( dt1 ), r++,
		name = Column( dt1, "PARAMETER" )[r];
		lsl = Column( dt1, "SPEC_LOW" )[r];
		usl = Column( dt1, "SPEC_HIGH" )[r];
		//tar = Column(dt1, "Target")[r];
		tar = "";
		
		lal= Column(dt1,"AXIS_LOW")[r];
		ual= Column(dt1,"AXIS_HIGH")[r];
		inc= Column(dt1,"AXIS_INC")[r];
		scale= Column(dt1,"AXIS_SCALE")[r];
		
		If( Contains( clist, name ),

                      Eval( Eval Expr(	Column( dt, name )<< Set Property("Spec Limits",{LSL( Expr( lsl ) ), USL( Expr( usl ) ), Target( Expr( tar ) ), Show Limits( 1 )})  )  );
                      Eval( Eval Expr(	Column( dt, name )<< Set Property("Axis",{MIN( Expr( lal ) ), MAX( Expr( ual ) ), INC( Expr( inc ) ), SCALE(Expr(scale))})  )  );

		);
	);
);

include("cleanName.jsl");
specsToTable=Function({dt,dtLim,param},{Default Local},

	Print("about to update limits table.");

	specs=column(dt,param)<<Get Property("spec limits");
	ax=column(dt,param)<<Get Property("axis");
	For(r=1, r<=N Rows(dtLim), r++,
		dirtyname=Column(dtLim,"PARAMETER")[r];
		//print(cleanName(dirtyName));
		if (cleanName(dirtyname)==param,
			Print("Updating Limits Table");
			Column(dtLim,"SPEC_LOW")[r]=specs["LSL"];
			Column(dtLim,"SPEC_HIGH")[r]=specs["USL"];
			Column(dtLim,"AXIS_LOW")[r]=ax["MIN"];
			Column(dtLim,"AXIS_HIGH")[r]=ax["MAX"];
			Column(dtLim,"AXIS_INC")[r]=ax["INC"];
			Column(dtLim,"AXIS_SCALE")[r]=ax["SCALE"];
			Break();
		);
	);
	dtLim << Save;
)