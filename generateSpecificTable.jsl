Names Default To Here(1);
generateSpecificTable=Function({dataname,whichparams,wafermap},{Default Local},
	// Generate table for specific parameters
	dtLimits=Open("saved_data/"||dataname||".LIMITS.jmp",Private);
	fulltab=Open("saved_data/"||dataname||".jmp",Private);
	:WAFER << Set Modeling Type(Nominal);
	
	specialanalysis=0;
	if(not(N Items(whichparams)),
		Write("Listing Parameters...\!N");
		//all params=Associative Array(:PARAMETER << Get Values)<<Get Keys;
		all params=column(dtLimits,"Parameter")<<Get Values;
		//all params={ "1", "2", "3"};
		Write("Done listing parameters.\!N");
		New Window(<<Modal,
			VListBox(
			whichparambox=ListBox(all params)
			,specialanalysisbox=CheckBox("Special Analysis"))
				
			);
		whichparams=whichparambox<<Get Selected;
		specialanalysis=specialanalysisbox<<Get();
	);
	
	if(not(N Items(whichparams)),
		Write("No variables selected.");
		Stop();
	);
	
	Write("Generating horizontal data for specific parameters...\!N");
	fulltab<<select where(contains(whichparams,:parameter));
	ptab=fulltab<<subset(selected,Private);
	Close(fulltab,No Save);

	// Make table horizontal
	phtab=ptab<<
		Split(
			Split By( :PARAMETER ),
			Split( :VALUE ),
			Output Table( "Pre-Join Horizontal" ),
			Remaining Columns( Keep(:WAT_FILE_KEY, :WAFER, :SITE, :XCOORD, :YCOORD ) ),
			Private
		);
	Close(ptab,No Save);

	// Add in limits
	Write("Adding Spec Limits\!N");
	include("populateSpecs.jsl");
	populateSpecs(phtab,dtLimits);
	//Close(dtLimits,No Save);

	// Add in WAT key data
	Write("Adding WAT Key data\!N");
	dtWAT=Open("saved_data/WAT_Key.jmp",Private);
	htab=dtWAT << Join(
		With( phtab ),
		By Matching Columns( :WAT_FILE_KEY = :WAT_FILE_KEY ),
		Drop multiples( 0, 0 ),
		Name( "Include non-matches" )(0, 0),
		Preserve main table order( 1 ),
		Output Table( "HORIZONTAL" ),
		//Invisible
		//Private
	);
	Close(dtWAT, No Save);
	Close(phtab, No Save);
	
	Write("Cleaning column names\!N");
	
	splits file="splits\splits.xlsx";
	if(file exists(splits file),
		Write("Found splits file.\!N");
		splittab=Open(
			splits file,
			//Worksheets( "Split Tables" ),
			Open all sheets(1),
			Use for all sheets( 1 ),
			Concatenate Worksheets( 0 ),
			Create Concatenation Column( 0 ),
			Worksheet Settings(
				1,
				Has Column Headers( 1 ),
				Number of Rows in Headers( 1 ),
				Headers Start on Row( 1 ),
				Data Starts on Row( 2 ),
				Data Starts on Column( 1 ),
				Data Ends on Row( 0 ),
				Data Ends on Column( 0 ),
				Replicated Spanned Rows( 1 ),
				Suppress Hidden Rows( 1 ),
				Suppress Hidden Columns( 1 ),
				Treat as Hierarchy( 0 )
			),
			Private
		);

		splittab columns=splittab<<Get Column Names;
		pos full lot=contains(splittab columns,As Name("Full Lot"));
		pos wafer=contains(splittab columns,As Name("Wafer"));
		splittab columns=splittab<<Get Column Names(String);
		hor columns =htab <<Get Column Names (String);
		
		if( not(pos full lot) | not(pos wafer),
			Write("Splits table incorrectly formatted!\!N");,
			
			select expr = expr( select());
			for(i=1, i<=nitems(hor columns), i+=1,
				insert into(select expr, column(htab,hor columns[i]));
			);
			
			remove from (splittab columns, 1, pos wafer);
			select with expr = expr(select with());
			for(i=1, i<=nitems(splittab columns), i+=1,
				insert into(select with expr, column(splittab,splittab columns[i]));
			);
			//Show(select with expr);
			
			select with expr expr=expr(name expr(select with expr));
			select expr expr=expr(name expr(select expr));
			joinexpr=eval expr(
				newhtab=htab << Join(
					With(splittab),
					By Matching Columns(:LOT_ID = :Full Lot, :WAFER = :Wafer),
					expr(select expr expr),
					expr(select with expr expr),
					Preserve Main Table Order(1),
					Suppress Formula Evaluation(1),
					Include Non Matches(1,0),
					Output Table Name("Joined Horizontal"),
					Invisible
			));
			//Show(joinexpr);
			eval(joinexpr);
			close(htab, No Save);
			htab=newhtab;
		);
		
		,
		Write("Didn't find splits file.  Proceeding without.\!N");
	);
	
	
	htab << Begin Data Update;
	htab << New Column("Coord_CAT", Character,Formula(Char(:XCOORD) || "_" || Char(:YCOORD)));
	include("mapCenterEdge.jsl");
	ce map=::CE Maps[wafermap] ;
	ce formula=eval expr(if(expr(ce map)[:Coord_CAT],"Edge","Center"));
	eval( eval expr(
		htab<< New Column("ColorMap", Character, Nominal, Formula(name expr(ce formula)))));
	(htab << Select Where( :ColorMap == "Center"))<<Colors("Red");
	(htab << Select Where( :ColorMap == "Edge"))<<Colors("Blue");
	//htab << Color By Column("ColorMap");
	htab << End Data Update;
	
	
	Write("Creating Failure columns...\!N");
	htab << Begin Data Update;
	// Create the failbool columns
	For( p=1, p<=N Items(whichparams), p+=1,
		colname=whichparams[p];
		failbool_colname=colname||"_FAILBOOL";
		failpct_colname=colname||"_FAILPCT";
		
		formulabool= eval expr(
			(( ascolumn(expr(colname)) < (ascolumn(expr(colname))<<Get Property("Spec Limits"))["LSL"])
			|
			( ascolumn(expr(colname)) > (ascolumn(expr(colname))<<Get Property("Spec Limits"))["USL"])) 	
			);
			
		formulapct= eval expr(
			col mean(ascolumn(expr(failbool_colname)),:WAFER, :LOT_ID, :PCM_SPEC)
		);
		//show(formula);
		htab << New Column(
			failbool_colname,
			Formula(nameexpr(formulabool))
		);
		htab << New Column(
			failpct_colname,
			Formula(nameexpr(formulapct))
		);
	);
	
	
	htab << New Column("the date", Numeric, Continuous, Format("Best", 12),
		Formula(Parse Date(:DATE, "YYYY-MM-DD")));
	
	htab << RunFormulas();
	htab << End Data Update;
	
	Write("Done generating horizontal table.\!N");
	eval list({htab,whichparams,specialanalysis,dtLimits});
);