//Write("PDICTs IS GLOBAL!!!\!N");


							
generateVariabilityReport=Function({htab,params,isspecial,dtLimits},{Default Local},

	rno=N Items(::pdicts)+1;
	//Show(rno);
	::pdicts[rno]=Associative Array();
	::pdicts[rno]["htab"]=htab;
	
	If(isspecial,
		cd = Column Dialog(
			xvars = ColList("X Variables",Columns(:WAFER)),
			xgroupers =  ColList("X Grouping",Columns(:PCM_SPEC, :LOT_ID)),
		);
		xvars=cd["xvars"];
		xgroupers=cd["xgroupers"];
		,
		xvars= List(:WAFER);
		xgroupers= List(:PCM_SPEC, :LOT_ID);
	);
	if(n items(xvars),
		primary xvar=xvars[1]<<get name;,
		primary xvar="";);
	//Show(primary xvar);
	win=New Window("Variability",
		vb=V List Box());

	::up=0;
	::dog=9;
	::abc=1;
	For( p=1, p<=N Items(params), p+=1,	
		colname=params[p];
		fail_colname=Concat(colname,"_FAILPCT");	
		::pdicts[rno][colname]=Associative Array();
		
		
		::pdicts[rno][colname]["LSL"]=(column(htab,colname) << get property("spec limits"))["LSL"];
		::pdicts[rno][colname]["USL"]=(column(htab,colname) << get property("spec limits"))["USL"];
		
		::pdicts[rno][colname]["script"]=eval expr(
			Handle( .5, ::pdicts[expr(rno)][expr(colname)]["LSL"],
			
				//print("::up");
				//print(::up);
				if(::up,print("doing nothing");::up=0;Stop();,
					print("doing something");
					print("staring lsl handle script");
					print(expr(colname));
					::pdicts[expr(rno)][expr(colname)]["lslbox"]<<set(y);
					print("hey");
					print(expr(colname),expr(rno));
					lslboxChanged(expr(colname),expr(rno));
				);,
				
				::up=1;
				//print("respecing");
				reSpec(expr(colname),expr(rno));
				//updateCPKrow(expr(colname),expr(rno));
				//print("done respecing");
				::up=0;
			);
			Handle( .5,::pdicts[expr(rno)][expr(colname)]["USL"],
			
				print("::up");
				print(::up);
				if(::up,print("doing nothing");::up=0;Stop();,
					print("doing something");
					print("staring usl handle script");
					print(expr(colname));
					::pdicts[expr(rno)][expr(colname)]["uslbox"]<<set(y);
					print("hey");
					print(expr(colname));
					uslboxChanged(expr(colname),expr(rno));
				);,
				
				//::up=1;
				//print("respecing");
				//::dog=6;
				reSpec(expr(colname),expr(rno));
				//updateCPKrow(expr(colname),expr(rno));
				//print("done respecing");
				//::dog=7;
				//::up=0;
			);
			//Text(Center Justified,{5,5},Char(::pdicts[expr(rno)][expr(colname)]["USL"]));
			//Text(Center Justified,{5,5},Print("WHAT"););
		);
		
		xvarexpr=expr(Variables());
		for(i=1, i<=n items(xvars),i+=1,
			insertinto(xvarexpr,
				eval expr( X(expr(xvars[i]),Position(1)))
			)
		);
		insertinto(xvarexpr,
			eval expr(Y(column(htab,expr(fail_colname))))
		);
		insertinto(xvarexpr,
			eval expr(Y(column(htab,expr(colname))))
		);
		for(i=1, i<=n items(xgroupers), i+=1,
			insertinto(xvarexpr,
				eval expr(Group X(expr(xgroupers[i]))));
		);
		//Show(xvarexpr);
		xvarexprexpr=expr(nameexpr(xvarexpr));
		
		
		vargraph=eval expr(
			Graph Builder(
				Size( 560, 590 ),
				Show Control Panel( 0 ),
				Show Legend( 0 ),
				X Group Edge( "Bottom" ),
				expr(xvarexprexpr),
				Relative Sizes( "Y", [1 7] ),
				Elements(
					Position( 1, 1 ),
					Line(
						X( 1 ),
						X( 2 ),
						X( 3 ),
						Y,
						Legend( 8 ),
						Row order( 0 ),
						Summary Statistic( "Mean" )
					)
				),
				Elements(
					Position( 1, 2 ),
					Points( X( 1 ), X( 2 ), X( 3 ), Y, Legend( 1 ), Jitter( 1 ) ),
					Box Plot(
						X( 1 ),
						X( 2 ),
						X( 3 ),
						Y,
						Legend( 6 ),
						Jitter( 1 ),
						Outliers( 1 ),
						Box Style( "Outlier" )
					)
				),
				SendToReport(
					Dispatch(
						{},
						expr(fail_colname),
						ScaleBox,
						{Format( "Percent", 10, 3 )}
					),
					//Dispatch(
					//	{},
					//	expr(primary xvar),
					//	ScaleBox,
					//	{Show Major Grid( 1 )}
					//),
					Dispatch( {}, "400", LegendBox, {Position( {-1, -1, -1} )} ),
					Dispatch( {}, "Y title", TextEditBox, {Set Text( "Failure rate" )} ),
					Dispatch( {}, "graph title", TextEditBox, {Set Text( "Variability Plot" )} ),
				)
			)
		);

		//show(vargraph);

		eval(eval expr(vb<<append(::pdicts[rno][colname]["graph"]=expr(name expr(vargraph)))));
		
		(::pdicts[rno][colname]["graph"]<<report())<<append(guibox=HListBox());
		eval(evalexpr(guibox<<append(slob=OutlineBox("Spec Limits",
			{"Recalc CPK",UpdateCPKrow(expr(colname),expr(rno))},
			<<OutlineCloseOrientation(Horizontal)))));
		
		slob<<append(buthb=H List Box(Align(Center)));
		eval(eval expr(buthb<<append(ButtonBox("Activate Sliders",
			((::pdicts[expr(rno)][expr(colname)]["graph"]<<report)[Frame Box (2)])<<remove graphics script(1);
			((::pdicts[expr(rno)][expr(colname)]["graph"]<<report)[Frame Box (2)])<<add graphics script(
				expr(::pdicts[rno][colname]["script"])))
			)));
		
		include("populateSpecs.jsl");
		eval(eval expr(buthb<<append(ButtonBox("Save Param",
			setAxis(expr(colname),expr(rno));
			specsToTable(htab,expr(dtLimits),expr(colname));
		))));
		
		slob<<append(limshb=H List Box());
		(::pdicts[rno][colname]["graph"]<<report())<<set title(colname);
		(::pdicts[rno][colname]["graph"]<<report())<<set auto stretching(0,0);
		
		limshb<<append(TextBox("<b> LSL:  </b>",<<Markup(1)));
		
		eval(eval expr(limshb<<append(
			::pdicts[rno][expr(colname)]["lslbox"]=NumberEditBox(::pdicts[expr(rno)][expr(colname)]["LSL"],10,
				<<Set Function(Function({},{},
					lslboxChanged(expr(colname),expr(rno));
					reSpec(expr(colname),expr(rno));
					Show("After box changed.");
					))))));
		limshb<<append(TextBox("<b>  USL:  </b>",<<Markup(1)));
		
		
		eval(eval expr(limshb<<append(
			::pdicts[expr(rno)][expr(colname)]["uslbox"]=NumberEditBox(::pdicts[expr(rno)][expr(colname)]["USL"],10,
				<<Set Function(Function({},{},
					uslboxChanged(expr(colname),expr(rno));
					reSpec(expr(colname),expr(rno));
					))))));
		
		slob<<append(cpkhb=H List Box());
		cpkhb<<append(TextBox("<b> Mean:  </b>",<<Markup(1)));
		eval(eval expr(cpkhb<<append(
			::pdicts[expr(rno)][expr(colname)]["meanbox"]=
				TextBox("Hit Calc";))));
		cpkhb<<append(TextBox("<b>  CPL:  </b>",<<Markup(1)));
		eval(eval expr(cpkhb<<append(
			::pdicts[expr(rno)][expr(colname)]["cplbox"]=
				TextBox("Hit Calc";))));
		cpkhb<<append(TextBox("<b>  CPU:  </b>",<<Markup(1)));
		eval(eval expr(cpkhb<<append(
			::pdicts[expr(rno)][expr(colname)]["cpubox"]=
				TextBox("Hit Calc";))));
		slob<<append(medhb=HListBox());
		
		eval(eval expr(
		t=htab<<Tabulate(
			Show Control Panel( 0 ),
			Add Table(
				Column Table( Analysis Columns( expr(column(htab,colname) ) ) ),
				Row Table( Statistics( Median) )
			),
			<<MakeIntoDataTable(Invisible(1),OutputTable("Stats"))
		)));
		med=Column(DataTable("Stats"),colname)[1];
		t<<Close Window();
		Close("Stats",NoSave);
		medhb<<append(TextBox("<b> Unfiltered Median:  </b>"||Format(med,"Best",7),<<Markup(1),<<SetWidth(200)));
		//slob<<append(extrahb=HListBox());
		eval(eval expr(buthb<<append(ButtonBox("Hold Scales",setAxis(expr(colname),expr(rno))))));
		//eval(eval expr(cpkhb<<append(
		//	specialFilter(expr(colname),expr(rno)))));
		
		
		eval(eval expr(guibox<<append(
			datfilt=htab<<DataFilter(Filter Columns(expr(colname)),Set Select(0),Set Show(1),Set Include(1)))));
		((datfilt<<report)[OutlineBox(1)])<<OutlineCloseOrientation(Horizontal) <<Close;
		eval(eval expr(guibox[ButtonBox(8)]
			<<Sib Append(ButtonBox("RECALC CPK",updateCPKrow(expr(colname),expr(rno));))));
		//eval(eval expr(limshb<<append(ButtonBox("::update specs",ReSpec(expr(colname))))));
		
		updateCPKRow(colname,rno);
	);

);


lslboxChanged=Function({colname,rno},{Default Local},
	//eval expr(((::pdicts[rno][colname]["graph"]<<report)[axis box(3)])<<remove ref line(expr(::pdicts[rno][colname]["LSL"])));
	//eval expr(((::pdicts[rno][colname]["graph"]<<report)[axis box(3)])<<remove ref line(expr(::pdicts[rno][colname]["USL"])));
	
	newlsl=::pdicts[rno][colname]["lslbox"] <<get();
	::pdicts[rno][colname]["LSL"]=newlsl;
);

uslboxChanged=Function({colname,rno},{Default Local},
	newusl=::pdicts[rno][colname]["uslbox"] <<get();
	::pdicts[rno][colname]["USL"]=newusl;
);


reSpec=Function({colname,rno},{Default Local},
	
	print("begin respec");
	setAxis(colname,rno);
	newprops= eval expr({
			LSL(expr(::pdicts[rno][colname]["LSL"])),
			USL(expr(::pdicts[rno][colname]["USL"])),
			TARGET(.),
			Show Limits(1),
			Add Ref Line(expr(::pdicts[rno][colname]["LSL"]),0,5,"LSL");
			Add Ref Line(expr(::pdicts[rno][colname]["USL"]),0,5,"USL");
			Print("I'm an axis property!!");
	});
	htab=::pdicts[rno]["htab"];
	column(htab,colname)<<Delete Property("Spec Limits");
	eval(eval expr(column(htab,colname)<<Set Property("Spec Limits",expr(newprops))));
	column(htab,concat(colname,"_FAILBOOL")) <<EvalFormula();
	column(htab,concat(colname,"_FAILPCT")) <<EvalFormula();
	//htab << RunFormulas();
	//htab << Rerun Formulas;
	
	print("end respec");
	updateCPKrow(colname,rno);
);

setAxis=Function({colname,rno},{Default Local},
	((::pdicts[rno][colname]["graph"]<<report)[axis box(3)])<<Save To Column Property;
	
	col=column(::pdicts[rno]["htab"],colname);
	
	ax script=((::pdicts[rno][colname]["graph"]<<report)[axis box(3)])<<Get Script;
	clean ax script={};
	for (a=1, a<=n items(ax script), a+=1,
		if (headname(ax script[a])!="Add Ref Line",
			clean ax script[N Items(clean ax script)+1]=ax script[a];
			);
	);
	eval(eval expr(col<< Set Property("Axis", expr(clean ax script))));
	
);

updateCPKrow=Function({colname,rno},{Default Local},
	Write("Updating CPK\!N");
	col=column(::pdicts[rno]["htab"],colname);
	
	Summarize(mu=Mean(col),sigma=Std Dev(col));
	
	cpu=(::pdicts[rno][colname]["USL"]-mu)/(3*sigma);
	cpl=(mu-::pdicts[rno][colname]["LSL"])/(3*sigma);
	
	::pdicts[rno][colname]["meanbox"]<<set text(Format(mu,"Best",7));
	::pdicts[rno][colname]["cplbox"]<<set text(char(round(cpl,3)));
	::pdicts[rno][colname]["cpubox"]<<set text(char(round(cpu,3)));
);
